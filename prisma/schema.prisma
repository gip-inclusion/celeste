// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(uuid())
  name      String   @unique
  source    String
  apiToken  String   @unique
  createdAt DateTime @default(now())
  events    Event[]
}

model Event {
  // Event
  id             String   @id @unique @default(uuid())
  type           String   @db.VarChar(255)
  source         String   @db.VarChar(255)
  timestamp      DateTime
  correlationId  String?  @db.VarChar(255)
  // Subs
  actorSub       String   @db.VarChar(255)
  actorType      String   @db.VarChar(255)
  beneficiarySub String?  @db.VarChar(255)
  structureSub   String?  @db.VarChar(255)
  adminSub       String?  @db.VarChar(255)
  // Payload
  payload        Json     @default("{}")
  // Meta
  createdAt      DateTime @default(now())
  // Relationships
  clientId       String   @db.VarChar(255)
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Relation Many-to-Many avec Execution via ExecutionEvent
  executions ExecutionEvent[]
}

model Execution {
  id                           String   @id @default(uuid())
  startedAt                    DateTime @default(now())
  endedAt                      DateTime?
  lastProcessedEventCreatedAt  DateTime?
  status                       String   @default("pending") // pending, successed, failed (inspired by Kubernetes pod states)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  // Relation Many-to-Many avec Event via la table pivot ExecutionEvent
  processedEvents ExecutionEvent[]
}

model ExecutionEvent {
  executionId String
  eventId     String

  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([executionId, eventId]) // Clé primaire composite pour éviter les doublons
}